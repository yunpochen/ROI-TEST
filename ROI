import cv2
import numpy as np

def empty(v):
    pass

    # 讀取圖片

img = cv2.imread('2234.jpg')
#img234 = img.copy()
#img= cv2.GaussianBlur(img, (5, 5), 0)
# 轉成HSV
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
# 指定特定顏色的範圍
cv2.namedWindow('TrackBar')
cv2.resizeWindow('TrackBar',640,320)

cv2.createTrackbar('H min','TrackBar',0,179, empty)
cv2.createTrackbar('H max','TrackBar',179,179, empty)
cv2.createTrackbar('S min','TrackBar',60,179, empty)
cv2.createTrackbar('S max','TrackBar',255,255, empty)
cv2.createTrackbar('V min','TrackBar',40,179, empty)
cv2.createTrackbar('V max','TrackBar',255,255, empty)
cv2.createTrackbar('coo','TrackBar',0,50, empty)

while True:

    h_min = cv2.getTrackbarPos('H min', 'TrackBar')
    h_max = cv2.getTrackbarPos('H max', 'TrackBar')
    s_min = cv2.getTrackbarPos('S min', 'TrackBar')
    s_max = cv2.getTrackbarPos('S max', 'TrackBar')
    v_min = cv2.getTrackbarPos('V min', 'TrackBar')
    v_max = cv2.getTrackbarPos('V max', 'TrackBar')
    coo = cv2.getTrackbarPos('coo', 'TrackBar')
    lower_brown = np.array([h_min, s_min, v_min])
    upper_brown = np.array([h_max,s_max, v_max])


    #lower_brown = np.array([0, 60, 40]) #棕色
    #upper_brown = np.array([130, 250, 130]) #棕色
    #lower_brown = np.array([0, 63, 24]) #棕色
    #upper_brown = np.array([21, 255, 85]) #棕色
    #lower_brown = np.array([0, 72, 6]) #棕色
    #upper_brown = np.array([67, 255, 82]) #棕色
    # 建立mask, 只有符合特定顏色範圍的部分會變成白色，其餘都會變黑色
    mask = cv2.inRange(hsv,lower_brown, upper_brown)

    # 使用一個3x3大小的kernel對mask進行膨脹
    kernel = np.ones((coo, coo), np.uint8)
    kernel1 = np.ones((6, 6), np.uint8)
    mask1 = cv2.dilate(mask, kernel, iterations=1)
    mask2 = cv2.dilate(mask, kernel1, iterations=1)

    # 透過mask，取出符合特定顏色範圍的部分
    result = cv2.bitwise_and(img, img, mask=mask1)
    # 找到輪廓
    #contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)  # 畫上輪廓
    #cv2.drawContours(result, contours, -1, (0, 255, 0), 3)
    # 計算面積並標示於圖片上
    #for cnt in contours:
    #area = cv2.contourArea(cnt)
    #M = cv2.moments(cnt)
    #cX = int(M["m10"] / M["m00"])
    #cY = int(M["m01"] / M["m00"])
    #cv2.putText(result, "Area: {}".format(area), (cX,cY), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    # 顯示結果

    gray = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 20, 200)
    circles = cv2.HoughCircles(edges, cv2.HOUGH_GRADIENT, 0.01, 150, 200, 50,
                               minRadius=1, maxRadius=200)
    circles = np.uint16(np.around(circles))
    if circles is not None and circles[0][0].ndim == 1:
        for i in circles[0, :]:
            cv2.circle(edges, (i[0], i[1]), i[2], (0, 255, 0), 2)
            cv2.circle(edges, (i[0], i[1]), 2, (0, 0, 255), 3)

    cv2.imshow("Result", mask1)
    cv2.imshow("Result1", mask2)
    cv2.imshow("Result2", result)
    cv2.imshow("gray", gray)
    cv2.imshow("edge", edges)
    cv2.waitKey(1)
